// <auto-generated />
using System;
using HolePunch.Accesses.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HolePunch.Accesses.Repositories.Migrations
{
    [DbContext(typeof(HolePunchContext))]
    [Migration("20210402090518_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HolePunch.Accesses.Repositories.CidrGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string[]>("CidrList")
                        .HasColumnType("text[]")
                        .HasColumnName("cidr_list")
                        .HasComment("網段集合");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("名稱");

                    b.HasKey("Id");

                    b.ToTable("cidr_group", "holepunch");

                    b
                        .HasComment("網段組");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasComment("是否啟用");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("logo_url")
                        .HasComment("服務Logo圖片網址");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("服務名稱");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port")
                        .HasComment("服務Listen埠號");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("protocol")
                        .HasComment("通訊協議(TCP/UDP)");

                    b.HasKey("Id");

                    b.ToTable("service", "holepunch");

                    b
                        .HasComment("服務");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.ServiceAllowRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Cidr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cidr")
                        .HasComment("網段");

                    b.Property<int?>("CidrGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("cidr_group_id")
                        .HasComment("網段組");

                    b.Property<int?>("ServiceForwardTargetId")
                        .HasColumnType("integer")
                        .HasColumnName("service_forward_target_id")
                        .HasComment("服務轉發目標ID，若為空則表示整個服務");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id")
                        .HasComment("服務ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type")
                        .HasComment("類型(CIDR_GROUP、CIDR、USER_GROUP、USER)");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("user_group_id")
                        .HasComment("使用者群組");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasComment("使用者ID");

                    b.HasKey("Id");

                    b.ToTable("service_allow_rule", "holepunch");

                    b
                        .HasComment("容許網段");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.ServiceForwardTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasComment("是否啟用");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ip_address")
                        .HasComment("IP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("轉發目標名稱");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port")
                        .HasComment("埠號");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority")
                        .HasComment("優先權(0最大)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id")
                        .HasComment("服務ID");

                    b.HasKey("Id");

                    b.ToTable("service_forward_target", "holepunch");

                    b
                        .HasComment("服務轉發目標");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("account")
                        .HasComment("帳號");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasComment("是否啟用");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("名稱");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password")
                        .HasComment("密碼(SHA1)");

                    b.HasKey("Id");

                    b.ToTable("user", "holepunch");

                    b
                        .HasComment("用戶");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin")
                        .HasComment("是否為管理者");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("名稱");

                    b.HasKey("Id");

                    b.ToTable("user_group", "holepunch");

                    b
                        .HasComment("使用者群組");
                });

            modelBuilder.Entity("HolePunch.Accesses.Repositories.UserGroupMember", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("user_group_id")
                        .HasComment("使用者群組ID");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasComment("使用者ID");

                    b.HasKey("UserGroupId", "UserId")
                        .HasName("pk_user_group_member");

                    b.ToTable("user_group_member", "holepunch");

                    b
                        .HasComment("使用者群組成員");
                });
#pragma warning restore 612, 618
        }
    }
}
